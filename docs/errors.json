[
  {
    "name": "BatchedSessionPartialUsageError",
    "regex": "SR Invalid Selector",
    "description": "Partial use of the BatchedSession router was attempted",
    "causes": ["You cannot partially use the BatchedSession policy leaves"],
    "solutions": ["Every policy leaf in the session must be used when submitting the txs", "Resubmit the txs with a corresponding tx for each leaf in the policy", "Use the simple Session instead of the Batched Session if you want to use single leaves. The simple Session can have multiple leaves in the Policy and any one of them can be used on their own." ]
  },
  {
    "name": "InsufficientTokenBalanceError",
    "regex": "account does not have enough token balance",
    "description": "The Smart Account does not have sufficient balance of the token with which you are attempting to pay gas with",
    "causes": ["Your smart account ran out of the relevant erc20 token"],
    "solutions": ["Send the relevant erc20 token to your smart account", "Choose a different token to pay with"]
  },
  {
    "name": "BatchSessionParamsNotValidError",
    "regex": "Lengths mismatch",
    "description": "The length of the batchSessionParams you have passed while sending the tx does not match the length of the session leaves",
    "causes": ["You cannot partially use a batch session tx", "You must use every leaf of a batchSession session while submitting the tx"],
    "solutions": ["If you are using the getBatchSessionTxParams helper ensure you pass in the same number of indexes as there are txs", "Double check the second arg passed into getBatchSessionTxParams(...)", "Use a single session with multiple policy leaves instead of a batch session if you wish to use one leaf at a time.", "If you are manually handling approvals in the batch session router Use the `skipPatchCallData` flag while building the userOp"]
  },
  {
    "name": "SessionDestinationNotApprovedError",
    "regex": "ABISV Destination Forbidden",
    "description": "One of the criteria in the transaction you are executing is forbidden by the policy rules signed by the grantor",
    "causes": ["You are using an incorrect sessionID", "You have incorrectly reconstructed the tx for the relevant policy leaf", "You have incorrectly requested the relevant policy leaf from the grantor, for the tx you are trying to execute on his behalf"],
    "solutions": ["Double check that you are using the correct value for the 'correspondingIndex' if you are using the 'getSingleSessionTxParams helper'. Check here for more info: 'https://bcnmy.github.io/biconomy-client-sdk/functions/getSingleSessionTxParams.html'", "Try passing the full Session (storageClient + sessionIdInfo) when you create the sessionSmartAccountClient", "Check that the params used in the tx matches exactly the criteria specified during the creation of the session"]
  },
  {
    "name": "SessionFunctionSelectorNotApprovedError",
    "regex": "ABISV Selector Forbidden",
    "description": "The session you are using has not whitelisted a matching function selector to one in your tx",
    "causes": ["You have incorrectly retrieved the merkletree leaf from your sessionStorageClient", "You are using an invalid or incorrect session", "You have misspelled the functionSelector that your user has whitelisted", "You have misspelled the functionSelector in your tx"],
    "solutions": ["Pass the correct sessionID into the params as the userOp gets built", "Request and use a different session from the user"]
  },
  {
    "name": "SessionNotApprovedError",
    "regex": "SessionNotApproved",
    "description": "The session you are using has not been permitted by the user, or is no longer valid",
    "causes": ["You are using an invalid session", "You have picked out an incorrect sessionID from the storage client", "You have recently added more sessions to the batch session module and the relevant session you require is no longer automatically found at the last index."],
    "solutions": ["Request and use a different session from the user instead", "Ensure you have chose the correct sessionID(s) from the storage client"]
  },
  {
    "name": "SessionRuleViolationError",
    "regex": "ABISV Arg Rule Violated",
    "description": "One of the rules you have applied to your session has caused your transaction to revert",
    "causes": ["The ABI Session Validation rules you have applied prevent your tx from executing"],
    "solutions": ["Check documentation here: https://bcnmy.github.io/biconomy-client-sdk/interfaces/Rule.html for detail for how to correctly apply your session permissions", "Request updated permissions from the smartAccount to which the policy has been granted."]
  },
  {
    "name": "SmartAccountInsufficientFundsError",
    "regex": "aa21",
    "description": "You are not using a paymaster, and the sender address did not have enough native tokens to cover the gas costs associated with the user operation.",
    "causes": ["Your smart wallet does not have funds to send transaction."],
    "solutions": [
      "If you are not using a paymaster, verify that the sender address has enough native tokens to cover the required prefund.",
      "Send some native tokens in your smart wallet to be able to resolve the error.",
      "If you are looking to use a paymaster to cover the gas fees, verify that the paymasterAndData field is set when you send the transaction."
    ]
  },
  {
    "name": "SmartAccountValidationRevertedError",
    "regex": "aa23",
    "description": "The smart account sender reverted or ran out of gas during the validation of the user operation.",
    "causes": ["Your smart account is out of gas."],
    "solutions": [
      "Make sure the signature verification logic of the smart account is implemented correctly.",
      "Ensure you are using the same signer, you created the account with.",
      "Verify that the verificationGasLimit is high enough to cover the validateUserOp function's gas costs.",
      "Make sure validateUserOp returns uint(1) for invalid signatures, and MUST NOT REVERT when the signature is invalid",
      "If you are using paymaster to sponsor the transactions, ensure that the paymasterAndData field of the user operation is correctly set to enable proper handling of gas fees",
      "Check that you have enough balance at the paymaster.",
      "If you are not using a paymaster, verify that the sender address has enough native tokens to cover the required pre fund.",
      "Verify that the validateUserOp function is implemented with the correct logic, and that the user operation is supposed to be valid.",
      "If the error persists, try simulating validateUserOp method on entrypoint contract with the user operation using tenderly"
    ]
  },
  {
    "name": "InvalidSmartAccountSignatureError",
    "regex": "aa24",
    "description": "The smart account sender signature is invalid.",
    "causes": [
      "The signature field of userOp is inaccurate.",
      "The userOp field is altered after the userOp has been signed."
    ],
    "solutions": [
      "Make sure you have selected the correct chainId and entryPointAddress when computing the userOpHash.",
      "Make sure you have selected the correct corresponding bundler URL when computing the userOpHash.",
      "Verify that the user operation was correctly signed, and that the signature was correctly encoded in the signature field of the user operation.",
      "Most smart account implementations sign over the userOpHash. Make sure that the userOpHash is correctly computed. Consider leveraging functions like getUserOperationHash.",
      "Make sure the smart account signature verification function is correctly implemented."
    ]
  },
  {
    "name": "SenderAlreadyDeployedError",
    "regex": "aa10",
    "description": "Smart account sender is already deployed.",
    "causes": [
      "Your smart wallet is already created but you are still sending initcode in userOp"
    ],
    "solutions": [
      "Remove the initCode from the user operation and set it to \"0x\""
    ]
  },
  {
    "name": "InitCodeRevertedError",
    "regex": "aa13",
    "description": "EntryPoint failed to create the smart account with the initCode provided.",
    "causes": [
      "The initCode ran out of gas",
      "The initCode reverted during the account deployment process",
      "The userOp doesn't have enough verificationGasLimit to create smart account"
    ],
    "solutions": [
      "Verify that the factory address in the initCode is correct (the factory address is the first 20 bytes of the initCode).",
      "Verify that the initCode is correct.",
      "Check whether the verificationGasLimit is sufficient for the initCode to complete without running out of gas.",
      "Increase verificationGasLimit to be able to send transaction."
    ]
  },
  {
    "name": "SenderAddressMismatchError",
    "regex": "aa14",
    "description": "The initCode returned a different smart account address than expected.",
    "causes": [
      "Account deployed with the initCode provided does not match the sender address provided",
      "The factory contract that you are using to deploy smart account does not return smart account address",
      "The sender field in userOp does not have the same address as factory contract is creating for you"
    ],
    "solutions": [
      "Verify that the sender address was generated deterministically from the initCode. (consider leveraging functions like getSenderAddress)",
      "Verify that the factory address in the initCode is correct (the factory address is the first 20 bytes of the initCode)",
      "Verify that the initCode is correct."
    ]
  },
  {
    "name": "BundlerOutOfGasError",
    "regex": "aa95",
    "description": "The bundler tried to bundle the user operation with the gas limit set too low, or too high.",
    "causes": [
      "The callGasLimit or verificationGasLimit is not correct for executing callData sent in userOp.",
      "The callGasLimit or verificationGasLimit has not been retrieved via the relevant bundler api."
    ],
    "solutions": [
      "Configure the bundler send gas limits properly.",
      "Make sure callGasLimit and verificationGasLimit are not too high/low and use correct estimated values for preparing the userOp."
    ]
  },
  {
    "name": "InvalidPaymasterAndDataError",
    "regex": "aa93",
    "description": "The paymasterAndData field of the user operation is invalid.",
    "causes": [
      "Throws if paymasterAndData created by signing service is not valid."
    ],
    "solutions": [
      "Make sure you have either not set a value for the paymasterAndData, or that it is at least 20 bytes long."
    ]
  },
  {
    "name": "InvalidBeneficiaryAddressError",
    "regex": "aa90",
    "description": "The bundler did not set a beneficiary address when bundling the user operation.",
    "causes": [
      "The beneficiary address sent in userOp that is going to get sponsored transaction fee back is not valid."
    ],
    "solutions": ["Check that the beneficiary address is valid."]
  },
  {
    "name": "PaymasterDataRejectedError",
    "regex": "aa34",
    "description": "The validatePaymasterUserOp function of the paymaster rejected paymasterAndData.",
    "causes": [
      "The paymaster's signature is invalid.",
      "Once the paymasterData is created, any changes to the userOp may lead to this error."
    ],
    "solutions": [
      "Verify that the user operation was correctly signed according to your implementation, and that the paymaster signature was correctly encoded in the paymasterAndData field of the user operation.",
      "Check the format of the signature in paymasterAndData.",
      "Make sure you do not modify any of the fields of the user operation after the paymaster signs over it (except the signature field).",
      "In case you have passed the calculateGasLimits flag as true while creating the paymasterData, do update the gasLimits as mentioned here to avoid this error."
    ]
  },
  {
    "name": "InvalidSmartAccountNonceError",
    "regex": "aa25",
    "description": "The smart account sender nonce is invalid.",
    "causes": [
      "Your nonce is invalid.",
      "The user operation may be re-using an old nonce, or formatted the nonce incorrectly.",
      "the userOp is not 1 more than the nonce in the nonceSequenceNumber map on the EntryPoint",
      "You have sent two userOps with same nonce with very little time difference, both pass simulation as both are at the time of simulation are valid. Whichever userOp lands on chain first will make the second userOp's nonce invalid",
      "You have not waited for a previous userOp to be confirmed",
      "the RPC passed into the SDK is using a free tier, which won't have the same performance and slow state data propagation as a paid RPC.",
      "You have sent a userOp to an incorrect chain"
    ],
    "solutions": [
      "Verify that you are using the correct nonce for the user operation. The nonce should be the current nonce of the smart account for the selected key. Consider using functions like getAccountNonce",
      "Wait for transaction confirmation before firing a second tx",
      "If you are trying parallel transactions execution, refer to 2d nonces (nonceOptions) here: (https://docs.biconomy.io/Account/methods#builduserop) for more details",
      "Pay for a tierd RPC provider.",
      "Verify that the nonce is formatted correctly."
    ]
  },
  {
    "name": "PaymasterDepositTooLowError",
    "regex": "aa31",
    "description": "Paymaster contract does not have enough funds deposited into the EntryPoint contract to cover the required funds for the user operation.",
    "causes": [
      "The Paymaster you have created using the dashboard does not have enough funds in its gas tank to sponsor the transaction."
    ],
    "solutions": [
      "Deposit more funds into the Paymaster via the dashboard.",
      "Verify that the paymasterAndData field is correct, and that the first 20 bytes are the address of the paymaster contract you intend to use.",
      "Reach out to us."
    ]
  },
  {
    "name": "VerificationGasTooLowError",
    "regex": "aa41",
    "description": "The amount of gas used by the smart account verification exceeded the verificationGasLimit set for the user operation.",
    "causes": [
      "The userOp does not have enough verificationGasLimit to create smart account"
    ],
    "solutions": [
      "Increase verificationGasLimit.",
      "Verify that the verificationGasLimit set for the user operation is high enough to cover the gas used during smart account's validateUserOp function.",
      "Investigate why the smart account's validateUserOp function used more gas than expected using tools like Tenderly."
    ]
  },
  {
    "name": "PaymasterValidationRevertedError",
    "regex": "aa33",
    "description": "The validatePaymasterUserOp function of the paymaster either reverted or ran out of gas.",
    "causes": [
      "Your paymaster ran out of funds",
      "the transaction you are sending is not valid or userOp does not have enough verificationGasLimit to be able to validate transaction.",
      "The userOp does not have enough verificationGasLimit to create a smart account"
    ],
    "solutions": [
      "Top up your paymaster via the dashboard",
      "Verify that the verificationGasLimit is high enough to cover the validatePaymasterUserOp function's gas costs.",
      "Verify the userOp you are building is valid.",
      "If you are not looking to use a paymaster to cover the gas fees, verify that the paymasterAndData field is not set.",
      "Use a verificationGasLimit offset, documented here: https://docs.biconomy.io/tutorials/utils/offsetGasValues"
    ]
  },
  {
    "name": "VerificationGasTooHighError",
    "regex": "aa40",
    "description": "The amount of gas used by the smart account verification did not adequately cover the verificationGasLimit set for the user operation.",
    "causes": [
      "The verification step on chain, is more than the verificationGasLimit."
    ],
    "solutions": [
      "Increase the verificationGasLimit",
      "While sending a transaction with the SDK avail of the `gasOffset['verificationGasLimit']` option, which allows you to increase the verificationGasLimit by an percentage (expressed as a integer).",
      "Investigate why the smart account's validateUserOp function used more gas than expected using tools like Tenderly."
    ]
  },
  {
    "name": "ActualGasCostTooHighError",
    "regex": "aa51",
    "description": "The actual gas cost of the user operation ended up being higher than the funds paid by the smart account or the paymaster.",
    "causes": [
      "Your smart wallet does not have funds to send transaction.",
      "The Paymaster you have created using dashboard does not have enough funds in its gas tank to sponsor transaction."
    ],
    "solutions": [
      "Top up your smart account with native token using the counterfactual address as the recipient.",
      "Top up your paymaster with native token."
    ]
  }
]
